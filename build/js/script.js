(function() {
  var $body, $win, ControllerBtns, FileUploader, Seek, Speed, Video, resizeEvents, setObserver;

  $win = $(window);

  $body = $('body');

  resizeEvents = {};

  setObserver = function($video, video) {
    $win.on({
      'resize': (function() {
        var distance, timer;
        timer = void 0;
        distance = 500;
        return function(e) {
          if (timer) {
            clearTimeout(timer);
          }
          timer = setTimeout(function() {
            var key;
            for (key in resizeEvents) {
              resizeEvents[key](e);
            }
          }, distance);
        };
      })()
    });
    return $video.on({
      'loadeddata': function(e) {
        var events, key;
        events = video.getEventsObj('loaded');
        for (key in events) {
          events[key](e);
        }
      },
      'ended': function(e) {
        var events, key;
        events = video.getEventsObj('ended');
        for (key in events) {
          events[key](e);
        }
      },
      'timeupdate': function(e) {
        var events, key;
        events = video.getEventsObj('timeupdate');
        for (key in events) {
          events[key](e);
        }
      },
      'play': function(e) {
        var events, key;
        events = video.getEventsObj('play');
        for (key in events) {
          events[key](e);
        }
      },
      'pause': function(e) {
        var events, key;
        events = video.getEventsObj('pause');
        for (key in events) {
          events[key](e);
        }
      }
    });
  };

  Video = (function() {
    var _after, _eventsObj, _hasVideo, _loop, _receivesObj, _speed, _styleFix, _videoInstance;

    _videoInstance = false;

    _hasVideo = false;

    _receivesObj = {};

    _loop = false;

    _speed = false;

    _eventsObj = {
      'loaded': {},
      'ended': {},
      'timeupdate': {},
      'play': {},
      'pause': {}
    };

    _receivesObj.urlSet = function(blob) {
      this.$video.attr('src', window.URL.createObjectURL(blob));
      _hasVideo = true;
    };

    _receivesObj.play = function(blob) {
      if (_hasVideo) {
        this.$video[0].play();
      }
    };

    _receivesObj.seekChanged = function(val) {
      this.$video[0].currentTime = val;
    };

    _receivesObj.speedChanged = function(val) {
      this.$video[0].playbackRate = val;
    };

    _receivesObj.pause = function(blob) {
      var $video;
      if (_hasVideo) {
        $video = this.$video;
        $video[0].pause();
      }
    };

    _receivesObj.loop = function(blob) {
      _loop = _loop === true ? false : true;
    };

    _after = function(e) {
      var _video;
      _video = this.$video[0];
      if (_loop) {
        _video.currentTime = 0;
        _video.play();
      } else {
        _video.currentTime = 0;
      }
    };

    _styleFix = function(e) {
      var _$video, _$videoWrap, _h, _wrap_h;
      _$video = this.$video;
      _$videoWrap = this.$videoWrap;
      _h = _$video.height();
      _wrap_h = _$videoWrap.height();
      _$video.css('height', 'auto');
      if (_wrap_h > _h) {
        _$video.css({
          'margin-top': ((_h + 100) / 2) * -1,
          'top': '50%'
        });
      } else {
        _$video.css({
          'height': _wrap_h,
          'margin-top': 0,
          'top': 0
        });
      }
    };

    function Video($video, resizeEvents, $videoWrap) {
      if (_videoInstance) {
        return _videoInstance;
      } else {
        _videoInstance = this;
      }
      this.$video = $video;
      this.$videoWrap = $videoWrap;
      _eventsObj.ended.after = (function(_this) {
        return function(e) {
          return _after.call(_this, e);
        };
      })(this);
      resizeEvents.videoStyleFix = (function(_this) {
        return function(e) {
          return _styleFix.call(_this, e);
        };
      })(this);
    }

    Video.prototype.getEventsObj = function(name) {
      if (name === 'all') {
        return _eventsObj;
      } else if (name && _eventsObj[name]) {
        return _eventsObj[name];
      } else {
        return false;
      }
    };

    Video.prototype.receiveEvent = function(name, arr) {
      if (name === 'upload') {
        _receivesObj.urlSet.call(this, arr[0]);
      }
      if (name === 'play') {
        _receivesObj.play.call(this);
      }
      if (name === 'pause') {
        _receivesObj.pause.call(this);
      }
      if (name === 'loop') {
        _receivesObj.loop.call(this);
      }
      if (name === 'seekChanged') {
        _receivesObj.seekChanged.call(this, arr[0]);
      }
      if (name === 'speedChanged') {
        _receivesObj.speedChanged.call(this, arr[0]);
      }
    };

    Video.prototype.get$obj = function() {
      return this.$video;
    };

    return Video;

  })();

  FileUploader = (function() {
    var _upload;

    _upload = function(e) {
      var file;
      file = e.target.files[0];
      if (!/^video/.test(file.type)) {
        alert("動画形式ではありません。");
        return false;
      }
      this.video.receiveEvent('upload', [
        new Blob([file], {
          type: file.type
        })
      ]);
    };

    function FileUploader(video, $input) {
      this.video = video;
      this.$input = $input;
      this.$input.on('change', (function(_this) {
        return function(e) {
          return _upload.call(_this, e);
        };
      })(this));
    }

    return FileUploader;

  })();

  Seek = (function() {
    var _changeSeekCount, _changeSeekbar, _duration, _hasVideo, _isDrag, _seekInit, _seekInput, _seekUp, _setSeekTimes, _time;

    _time = 0;

    _duration = 0;

    _hasVideo = false;

    _isDrag = false;

    _setSeekTimes = function() {
      var _video;
      _video = this.video.get$obj()[0];
      _time = _video.currentTime;
      _duration = _video.duration;
    };

    _changeSeekCount = function() {
      _setSeekTimes.call(this);
      this.$nowSeek.text(_time + ' / ' + _duration);
    };

    _changeSeekbar = function(e) {
      _setSeekTimes.call(this);
      if (!_isDrag) {
        this.$seek.val(Math.round((_time / _duration) * 10000) / 100);
      }
    };

    _seekInit = function(e) {
      var _video;
      _hasVideo = true;
      _video = $(e.target)[0];
      _time = _video.currentTime;
      _duration = _video.duration;
      this.$seek.val(_time);
      _changeSeekCount.call(this);
    };

    _seekUp = function(e) {
      var _val;
      _setSeekTimes.call(this);
      _val = (this.$seek.val() / 100) * _duration;
      this.video.receiveEvent('seekChanged', [_val]);
      _isDrag = false;
    };

    _seekInput = function(e) {
      if (!_hasVideo) {
        e.preventDefault();
        $(e.target).val(0);
      } else {
        _isDrag = true;
      }
    };

    function Seek(video, $seek, $nowSeek) {
      this.$seek = $seek;
      this.$nowSeek = $nowSeek;
      this.video = video;
      this.videoEvents = this.video.getEventsObj('all');
      this.$seek.on('input', (function(_this) {
        return function(e) {
          return _seekInput.call(_this, e);
        };
      })(this));
      this.$seek.on('change', (function(_this) {
        return function(e) {
          return _seekUp.call(_this, e);
        };
      })(this));
      this.$seek.on('', (function(_this) {
        return function(e) {
          return _seekUp.call(_this, e);
        };
      })(this));
      this.videoEvents.loaded['seekInit'] = (function(_this) {
        return function(e) {
          return _seekInit.call(_this, e);
        };
      })(this);
      this.videoEvents.timeupdate['changeSeekbar'] = (function(_this) {
        return function(e) {
          _changeSeekbar.call(_this, e);
          return _changeSeekCount.call(_this, e);
        };
      })(this);
      return;
    }

    return Seek;

  })();

  ControllerBtns = (function() {
    var _btnsReset, _changeBtn, _myLoop, _pause, _play;

    _changeBtn = function(type) {
      switch (type) {
        case 'play':
          this.btns.$play.addClass('active');
          this.btns.$pause.removeClass('active');
          break;
        case 'pause':
          this.btns.$pause.addClass('active');
          this.btns.$play.removeClass('active');
      }
    };

    _play = function(e) {
      e.preventDefault();
      this.video.receiveEvent('play');
    };

    _pause = function(e) {
      e.preventDefault();
      this.video.receiveEvent('pause');
    };

    _myLoop = function(e) {
      e.preventDefault();
      if (this.btns.$loop.hasClass('active')) {
        this.btns.$loop.removeClass('active');
      } else {
        this.btns.$loop.addClass('active');
      }
      this.video.receiveEvent('loop');
    };

    _btnsReset = function(e) {
      this.btns.$play.removeClass('active');
      this.btns.$pause.removeClass('active');
    };

    function ControllerBtns(video, btns) {
      this.video = video;
      this.btns = btns;
      this.videoEvents = this.video.getEventsObj('all');
      this.btns.$play.on('click', (function(_this) {
        return function(e) {
          return _play.call(_this, e);
        };
      })(this));
      this.btns.$pause.on('click', (function(_this) {
        return function(e) {
          return _pause.call(_this, e);
        };
      })(this));
      this.btns.$loop.on('click', (function(_this) {
        return function(e) {
          return _myLoop.call(_this, e);
        };
      })(this));
      this.videoEvents.play['changeBtn'] = (function(_this) {
        return function(e) {
          return _changeBtn.call(_this, 'play');
        };
      })(this);
      this.videoEvents.pause['changeBtn'] = (function(_this) {
        return function(e) {
          return _changeBtn.call(_this, 'pause');
        };
      })(this);
      this.videoEvents.loaded['btnsReset'] = (function(_this) {
        return function(e) {
          return _btnsReset.call(_this);
        };
      })(this);
    }

    return ControllerBtns;

  })();

  Speed = (function() {
    var _setSpeedMeter, _speedChange, _speedReset;

    _setSpeedMeter = function() {
      this.$meter.text(this.val);
    };

    _speedChange = function(e) {
      this.val = this.$input.val();
      _setSpeedMeter.call(this);
      this.video.receiveEvent('speedChanged', [this.val]);
    };

    _speedReset = function(e) {
      this.$input.val(this.defaultVal);
      this.val = this.$input.val();
      _setSpeedMeter.call(this);
      _speedChange.call(this);
    };

    function Speed(video, input, meter) {
      this.video = video;
      this.$input = $(input);
      this.$meter = $(meter);
      this.val = this.$input.val();
      this.defaultVal = this.val;
      this.videoEvents = this.video.getEventsObj('all');
      this.$input.on('change', (function(_this) {
        return function(e) {
          return _speedChange.call(_this, e);
        };
      })(this));
      this.videoEvents.loaded['speedReset'] = (function(_this) {
        return function(e) {
          return _speedReset.call(_this, e);
        };
      })(this);
    }

    return Speed;

  })();

  (function() {
    var controllerBtns, fileUploader, seek, speed, video;
    video = new Video($('#video'), resizeEvents, $('#video_wrap'));
    fileUploader = new FileUploader(video, $('#file'));
    seek = new Seek(video, $('#seek'), $('#now_seek'));
    speed = new Speed(video, '#speed', '#now_speed');
    controllerBtns = new ControllerBtns(video, {
      '$play': $('#controllers_btn .play a'),
      '$pause': $('#controllers_btn .pause a'),
      '$loop': $('#controllers_btn .loop a')
    });
    setObserver($('#video'), video);
    $win.trigger('resize');
  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,